import { Box, Center, Container, Flex, Spinner, Text } from "@chakra-ui/react";
import { type NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import InfiniteScroll from "react-infinite-scroll-component";
import LoadingPost from "~/components/LoadingPost";
import NewPostWizard from "~/components/NewPostWizard";
import Post from "~/components/Post";
import SearchBar from "~/components/SearchBar";
import { api } from "~/utils/api";

const Home: NextPage = () => {
  const {
    data: infinitePosts,
    isLoading: infinitePostsLoading,
    hasNextPage,
    fetchNextPage,
  } = api.post.getAllInfinite.useInfiniteQuery(
    {},
    {
      getNextPageParam(lastPage) {
        return lastPage?.nextCursor;
      },
    }
  );

  const [searchTerm, setSearchTerm] = useState("");
  const flattenInifinitePosts = infinitePosts?.pages.flatMap(
    (page) => page?.posts
  );

  return (
    <>
      <Head>
        <title>Pets</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box as={"main"} mx={2} my={4}>
        <Flex gap={4} mb={4}>
          <SearchBar
            searchTerm={searchTerm}
            setSearchTerm={setSearchTerm}
            placeholder="Search by @username or #tag..."
          />
          <NewPostWizard />
        </Flex>
        <Container maxW="lg">
          {/* infinite posts */}
          {infinitePostsLoading && <LoadingPost quantity={2} />}
          {flattenInifinitePosts?.length ? (
            <InfiniteScroll
              style={{ overflow: "hidden" }}
              dataLength={flattenInifinitePosts?.length ?? 0}
              next={fetchNextPage}
              hasMore={hasNextPage ?? false}
              loader={
                <Center>
                  <Spinner size={"xl"} thickness="4px" color="teal.400" />
                </Center>
              }
            >
              {flattenInifinitePosts.map(
                (post, idx) =>
                  post && (
                    <Post key={post.id} post={post} location="getAllInfinite" />
                  )
              )}
            </InfiniteScroll>
          ) : null}
          {!infinitePostsLoading && !flattenInifinitePosts?.length && (
            <Center>
              <Text fontSize={"2xl"}>User has no posts.</Text>
            </Center>
          )}
        </Container>
      </Box>
    </>
  );
};

export default Home;
