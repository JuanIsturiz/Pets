// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    pets          Pet[]
    posts         Post[]    @relation("author")
    comments      Comment[]
    likes         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([identifier, token])
}

model Pet {
    id        String   @id @default(cuid())
    name      String
    specie    String
    image     String   @db.LongText
    birthday  DateTime
    genre     String
    size      String
    bio       String?
    owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId   String
    posts     Post[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
}

model Post {
    id          String    @id @default(cuid())
    title       String
    description String?
    image       String    @db.LongText
    tags        String?
    pet         Pet       @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId       String
    author      User      @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
    authorId    String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    comments    Comment[]
    likedBy     User[]

    @@index([petId])
    @@index([authorId])
    @@fulltext([tags])
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())

    @@index([postId])
    @@index([userId])
}
